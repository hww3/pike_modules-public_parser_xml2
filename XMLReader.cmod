/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * $Id: XMLReader.cmod,v 1.7 2005-05-04 21:41:47 hww3 Exp $
 */

/*
 * File licensing and authorship information block.
 *
 * Version: MPL 1.1/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Initial Developer of the Original Code is
 *
 * Bill Welliver <hww3@riverweb.com>
 *
 * Portions created by the Initial Developer are Copyright (C) Bill Welliver
 * All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of the LGPL, and not to allow others to use your version
 * of this file under the terms of the MPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL or the LGPL.
 *
 * Significant Contributors to this file are:
 *
 *
 */

#define THIS_IS_XML2_XMLREADER 1

#include "xml2.h"

/*! @module Public
 */

/*! @module Parser
 */

/*! @module XML2
 */

/*! @class XMLReader
 *!
 *! A simplified parser for XML documents. Similar to the C# XMLReader 
 *! class.
 */
#ifdef HAVE_LIBXML_XMLREADER_H

PIKECLASS XMLReader
program_flags PROGRAM_USES_PARENT;
{

  CVAR XMLREADER_OBJECT_DATA   *object_data;

PIKEFUN string _sprintf(int type, mixed t)
{
  char * desc;

  push_text("XMLReader()");
}

/*! @decl mapping read_attribute_value()
 *!
 */
PIKEFUN mapping read_attribute_value()
{
  int res;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }
  res = xmlTextReaderRead(THIS->object_data->reader);
  if(res == 1) /* we got data to process! */
  {
    push_int(1);
    return;
  }
  else if (res == 0)
  {
    push_int(0);
    return;
  }
  else
  {
    Pike_error("unable to parse, result code: %d!\n", res);
  }
}

/*! @decl mapping read()
 *!
 */
PIKEFUN mapping read()
{
  int res;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }
  res = xmlTextReaderRead(THIS->object_data->reader);
  if(res == 1) /* we got data to process! */
  {
    push_int(1);
    return;
  }
  else if (res == 0)
  {
    push_int(0);
    return;
  }
  else
  {
    Pike_error("unable to parse, result code: %d!\n", res);
  }
}

/*! @decl int node_type()
 *! 
 */
PIKEFUN int node_type()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderNodeType(THIS->object_data->reader);
}

/*! @decl int depth()
 *! 
 */
PIKEFUN int depth()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderDepth(THIS->object_data->reader);
}

/*! @decl int has_attributes()
 *! 
 */
PIKEFUN int has_attributes()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderHasAttributes(THIS->object_data->reader);
}

/*! @decl int attribute_count()
 *! 
 */
PIKEFUN int attribute_count()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderAttributeCount(THIS->object_data->reader);
}

/*! @decl int next_sibling()
 *! 
 */
PIKEFUN int next_sibling()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderNextSibling(THIS->object_data->reader);
}

/*! @decl int next()
 *! 
 */
PIKEFUN int next()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderNext(THIS->object_data->reader);
}

/*! @decl int element()
 *! 
 */
PIKEFUN int element()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToElement(THIS->object_data->reader);
}

/*! @decl int first_attribute()
 *! 
 */
PIKEFUN int first_attribute()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToFirstAttribute(THIS->object_data->reader);
}

/*! @decl int next_attribute()
 *! 
 */
PIKEFUN int next_attribute()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToNextAttribute(THIS->object_data->reader);
}

/*! @decl int attribute_no()
 *! 
 */
PIKEFUN int attribute_no(int no)
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToAttributeNo(THIS->object_data->reader, no);
}

/*! @decl int attribute_ns(string localName, string namespaceURI)
 *! 
 */
PIKEFUN int attribute_ns(string localName, string namespaceURI)
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToAttributeNs(THIS->object_data->reader, 
    (const xmlChar *)localName->str, (const xmlChar *)namespaceURI->str);
}

/*! @decl int attribute(string name)
 *! 
 */
PIKEFUN int attribute(string name)
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderMoveToAttribute(THIS->object_data->reader, 
    (const xmlChar *)name->str);
}


/*! @decl int has_value()
 *! 
 */
PIKEFUN int has_value()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderHasValue(THIS->object_data->reader);
}

/*! @decl int is_default()
 *! 
 */
PIKEFUN int is_default()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderIsDefault(THIS->object_data->reader);
}

/*! @decl int is_namespace_decl()
 *! 
 */
PIKEFUN int is_namespace_decl()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderIsNamespaceDecl(THIS->object_data->reader);
}

/*! @decl int is_empty_element()
 *! 
 */
PIKEFUN int is_empty_element()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderIsEmptyElement(THIS->object_data->reader);
}

/*! @decl int is_valid()
 *! 
 */
PIKEFUN int is_valid()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderIsValid(THIS->object_data->reader);
}

/*! @decl int parser_column_number()
 *! 
 */
PIKEFUN int parser_column_number()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderGetParserColumnNumber(THIS->object_data->reader);
}

/*! @decl int parser_line_number()
 *! 
 */
PIKEFUN int parser_line_number()
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderGetParserLineNumber(THIS->object_data->reader);
}

/*! @decl int get_parser_prop(int prop)
 *! 
 *! @param prop
 *!   the property to get
 */
PIKEFUN int get_parser_prop(int prop)
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderGetParserProp(THIS->object_data->reader, prop);
}

/*! @decl int set_parser_prop(int prop, int value)
 *! 
 *! @param prop
 *!   the property to set
 *!
 *! @param value
 *!   the value to set
 */
PIKEFUN int set_parser_prop(int prop, int value)
{
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  RETURN xmlTextReaderSetParserProp(THIS->object_data->reader, prop, value);
}

/*! @decl string name()
 *! 
 */
PIKEFUN string name()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderName(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl string get_attribute(string name)
 *! 
 */
PIKEFUN string get_attribute(string name)
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderGetAttribute(THIS->object_data->reader, name->str);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}


/*! @decl string get_attribute_no(string name)
 *! 
 */
PIKEFUN string get_attribute_no(int no)
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderGetAttributeNo(THIS->object_data->reader, no);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl string get_attribute_ns(string localName, string namespaceURI)
 *! 
 */
PIKEFUN string get_attribute(string localName, string namespaceURI)
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderGetAttributeNs(THIS->object_data->reader, 
         localName->str, namespaceURI->str);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}


/*! @decl string lookup_namespace(string|void prefix)
 *! 
 */
PIKEFUN string lookup_namespace(string prefix)
{
  xmlChar * c;

printf("one arg!\n");
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderLookupNamespace(THIS->object_data->reader, prefix->str);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

PIKEFUN string lookup_namespace()
{
  xmlChar * c;

printf("no args!\n");
  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderLookupNamespace(THIS->object_data->reader, NULL);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl string xml_lang()
 *! 
 */
PIKEFUN string xml_lang()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderXmlLang(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}


/*! @decl string prefix()
 *! 
 */
PIKEFUN string prefix()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderPrefix(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int namespaceuri()
 *! 
 */
PIKEFUN string namespaceuri()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderNamespaceUri(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}
/*! @decl int baseuri()
 *! 
 */
PIKEFUN string baseuri()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderBaseUri(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int localname()
 *! 
 */
PIKEFUN string localname()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderLocalName(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int value()
 *! 
 */
PIKEFUN string value()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderValue(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int string()
 *! 
 */
PIKEFUN string string()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderReadString(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int inner_xml()
 *! 
 */
PIKEFUN string inner_xml()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderReadInnerXml(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl int outer_xml()
 *! 
 */
PIKEFUN string outer_xml()
{
  xmlChar * c;

  if(THIS->object_data->reader == NULL)
  {
    Pike_error("no xmlReader!\n");
  }

  c = xmlTextReaderReadOuterXml(THIS->object_data->reader);
  if(c != NULL)
  {
    push_text(c);
    xmlFree(c);
  }
  else
    push_int(0);
}

/*! @decl void create(string xml, string|void url, int|void options)
 *!
 */
PIKEFUN void create(string xml, string url, int options)
{
  xmlTextReaderPtr reader;
 
  reader = xmlReaderForMemory(xml->str, xml->len, url->str, 
               NULL, options);

  if(reader == NULL)
  {
    Pike_error("unable to get xmlReader\n");
  }

  THIS->object_data->reader = reader;

  pop_n_elems(args);
}

PIKEFUN void create(string xml)
{
  push_text("noname.xml");
  push_int(0);

  f_XMLReader_create(3);
}



INIT
{
  XMLREADER_OBJECT_DATA * dta;

  dta = 
	(XMLREADER_OBJECT_DATA*)malloc(sizeof(XMLREADER_OBJECT_DATA));
    if (!dta)
        Pike_error("init_xmlreader: Out of memory!\n");

    dta->reader = NULL;
    THIS->object_data = dta;
}

EXIT
{ 

  if(THIS->object_data->reader != NULL)
  {
    xmlFreeTextReader(THIS->object_data->reader);
  }
  if(THIS->object_data)
  {
    free(THIS->object_data);
  }
}
}

#endif /* HAVE_LIBXML_XMLREADER_H */
/*! @endclass
 */


/*! @endmodule
 */

/*! @endmodule
 */

/*! @endmodule
 */


void pike_init_xml2_xmlreader()
{
  INIT
}

void pike_exit_xml2_xmlreader()
{
  EXIT
}
